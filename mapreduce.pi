import "Std/List"
import "Std/String"
import "Std/Int"
import "Std/Array"

{- append helper function. combines two lists -}
def append [#X xs:(List X) ys:(List X) q:/(List X)] =
  if (null xs) then
    q!ys
  else
    ( new k:^(List X)
      ( append![#X (cdr xs) ys (rchan k)]
      | k?zs:(List X) = q!(cons (car xs) zs) ))

{- printer list helper function. prints all values of a list of type integer -}
def printList xs:(List Int) =
  if (null xs) then
    print!"\n"
  else
    ( printi!(car xs)
    | print!" "
    | printList!(cdr xs) )

{- reverse list helper function. reverses a list -}
def revAcc [#X xs:(List X) acc:(List X) q:/(List X)] =
  if (null xs) then
    q!acc
  else
    revAcc![#X (cdr xs) (cons (car xs) acc) q]

{- reverse list helper -}
def rev [#X xs:(List X) q:/(List X)] =
  revAcc![#X xs nil q]

def lengthAcc [#X xs:(List X) n:Int q:/Int] =
  if (null xs) then
    q!n
  else
    ( new sum:^Int
      ( +![n 1 (rchan sum)]            
      | sum?np1:Int = lengthAcc![#X (cdr xs) np1 q] ))

def length [#X xs:(List X) q:/Int] =
  lengthAcc![#X xs 0 q]
  
val xs = (cons 1 (cons 2 (cons 3 nil)))
val ys = (cons 4 (cons 5 nil))

new r:^(List Int)
new n:^Int
run (
    append![#Int xs ys (rchan r)]
    | r?zs:(List Int) = ( printList!zs | length![#Int zs (rchan n)] )
    | n?k:Int = printi!k
)